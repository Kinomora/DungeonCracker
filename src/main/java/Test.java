import dungeons.kaptainwutax.magic.PopReversal2TheHalvening;
import dungeons.kaptainwutax.util.Rand;

import java.util.Random;

public class Test {
    public static void main(String[] args) {
        int posX = -65;
        int posY = 62;
        int posZ = 62;
        //92655165313152
        long decoratorSeed = 16733948376765L;
        PopReversal2TheHalvening.getSeedFromChunkseedPre13(decoratorSeed ^ Rand.JAVA_LCG.multiplier, (posX - 8) >> 4, (posZ - 8) >> 4).forEach(System.out::println);
        /*
        [18:22:46] [Server thread/INFO]: [STDOUT]: WORLDSEED: -9161480349131746006
        [18:22:46] [Server thread/INFO]: [STDOUT]: STRUCTURE SEED: 248667823396138
        [18:22:46] [Server thread/INFO]: [STDOUT]: INTERNAL ORIGINAL SEED 248681352344391
        [18:22:46] [Server thread/INFO]: [STDOUT]: INTERNAL ORIGINAL SEED 150725636568281
        [18:22:46] [Server thread/INFO]: [STDOUT]: INTERNAL ORIGINAL SEED 115842438041019
        [18:22:46] [Server thread/INFO]: [STDOUT]: INTERNAL ORIGINAL SEED 78989798059410
        [18:22:46] [Server thread/INFO]: [STDOUT]: Original Coords  BlockPos{x=-80, y=0, z=128}


         */
        //posX = -80;
        //posZ = 128;
        //long worldSeed=-9161480349131746006L;
        //Rand rand = new Rand(0);
        //rand.setSeed(worldSeed, true);
        //System.out.println(rand.getSeed());
        //long k = rand.nextLong() / 2L * 2L + 1L;
        //System.out.println(rand.getSeed());
        //long l = rand.nextLong() / 2L * 2L + 1L;
        //System.out.println(rand.getSeed());
        //rand.setSeed((long) (posX>>4) * k + (long) (posZ>>4) * l ^ worldSeed, true);
        //System.out.println(rand.getSeed());
        posX = -120;
        posY = 17;
        posZ = -385;
        String stringPattern = "11111111111110111111011111111001111110100";
        // 1 mossy
        // 0 cobble
        //============================================================ END INPUT
        posX -= 8;
        posZ -= 8;
        int offsetX = posX & 15;
        int offsetZ = posZ & 15;
        System.out.println("OFFSET: " + offsetX + " " + offsetZ);
        long[] seeds = new long[]{61585941336905L, 131751131309166L, 54770226864059L, 279706714285622L, 29215855988424L, 274973918145961L, 217980365037833L, 50455602605838L, 245682059103397L, 39427376286087L, 63625613573545L, 134308484271263L, 61812162303567L, 241712184634018L, 143683872625320L, 226245885302755L, 55050011344493L, 249976014658488L, 48530742100198L, 257569166827743L, 24902976368047L, 97561927930005L, 89769110069549L, 6894643884383L, 280201476810281L, 80920417756940L, 149865584059197L, 76846636083066L, 110468133058569L, 192247535388577L, 262337326562142L, 143420352481800L, 43094077072262L, 171621707290898L, 15305685525444L, 74747452475425L, 272253153462443L, 30741668128052L, 207694215990009L, 265068585474246L, 101332758712698L, 109797238204823L, 252061549809136L, 237285194824459L, 223218561576914L, 208178788065948L, 60169787845131L, 188710773759158L, 264822884522857L, 57150973659957L, 121040227122268L, 93326341432207L, 72741316243075L, 162157669118864L, 57443996578755L, 123517329237320L, 30882734458253L, 188827203025630L, 179403558838000L, 227391408486790L, 167403919478661L, 212549679883035L, 232771290803410L, 246740265480896L, 167629044982606L, 238958813972648L, 55310210941139L, 74436880353502L, 181692234443710L, 249203972773548L, 38972737856788L, 261705779113102L, 230261280561322L, 42664596160626L, 64765690901785L, 209355308198177L, 43642845356321L, 233771137914120L, 81142749621187L, 132259116566137L, 61511700200811L, 206101317497203L, 256453091285303L, 89435147494411L, 41752422683132L, 156673501818203L, 82833245488411L, 137417844864546L, 262471425011570L, 101414797935081L, 218167333731373L, 100633920627073L, 208125820379618L, 265397675538772L, 101173991485659L, 204035687084860L, 101083201678995L, 174214927178045L, 217668658192910L, 173061306570821L, 36131020900059L, 37551977189129L, 182803227521115L, 195627436081351L, 69345285650204L, 190782684654026L, 225759141290420L, 216321376426350L, 88873781876156L, 151123598434199L, 262284042280860L, 246826446928103L, 76330734991756L, 63828928652202L, 263318479421012L, 140068238827887L, 225347510983584L, 169288948773755L, 178199451619122L, 223974539601710L, 41314092204858L, 223889155206815L, 224697137191108L, 194093070429393L, 269166540465298L, 280514396184521L, 1931756864607L, 124932899258462L, 120754583698101L, 197835966564283L, 52849587840100L, 8490079892503L, 67400410628983L, 202423456205222L, 145583752167802L, 251445555856867L, 250663466019542L, 268844176846818L, 405671922533L, 1427852390789L, 85589551214578L, 145529954665742L, 148435289206189L, 209064883286790L, 194553475986403L, 254792181983593L, 200958458565102L, 240725548736048L, 84376115400490L, 207644122619131L, 10520057207677L, 130582718066561L, 271304662642588L, 51382864751098L, 16786913801689L, 258697489363517L, 99684874735891L, 31721529891918L, 83859216579189L, 146090943799965L, 236564828738386L, 196121426893533L, 175209590853694L, 188986719716714L, 171550471412696L, 111767967485178L, 225579091950859L, 9740249832518L, 170945397123870L, 92494901335925L, 247637509565325L, 97151816734574L, 14648773171728L, 263513756999463L, 251347188444790L, 42397439333385L, 271430324200332L, 195017667097687L, 223981595703482L, 87096236289218L, 281029612601937L, 202094219235127L, 232220519032427L, 182864153706886L, 98161564110688L, 211505725124245L, 231075405152601L, 259088654491431L, 34005192333096L, 35976059599828L, 262896198703619L, 29103946804242L, 11325807688645L, 24716309266386L, 191590085824997L, 61275414637185L, 255500843075325L, 6965549325447L, 274406651331606L, 30792756672900L, 274818992355373L, 36587631659705L, 20161195957201L, 277979542162317L, 249002689781044L, 188763983783854L, 61264194498391L, 91408857317763L, 91403451905994L, 74582872218273L, 261808427807787L, 18656590188553L, 144273458698943L, 200424576663185L, 210013098737131L, 11062476312290L, 134594871064599L, 55683721029496L, 272644774500341L, 137474183130438L, 132553706206872L, 139452244875618L, 175984447733529L};
        for (long seed : seeds) {
            System.out.println(seed);
            check(seed, offsetX, posY, offsetZ, stringPattern);
        }
    }

    private static void check(long seed, int offsetX, int posY, int offsetZ, String pattern) {
        Random random = new Random(seed ^ Rand.JAVA_LCG.multiplier);
        System.out.print(random.nextInt(16) == offsetX);
        System.out.print(" ");
        System.out.print(random.nextInt(256) == posY);
        System.out.print(" ");
        System.out.print(random.nextInt(16) == offsetZ);
        System.out.print(" ");
        random.nextInt(2);
        random.nextInt(2);
        Integer[] patterns = pattern.chars().mapToObj(c -> c == '0' ? 0 : c == '1' ? 1 : 2).toArray(Integer[]::new);

        for (Integer s : patterns) {
            switch (s) {
                case 0:
                    System.out.print(random.nextInt(4) == 0);
                    System.out.print(" ");
                    break;
                case 1:
                    System.out.print(random.nextInt(4) != 0);
                    System.out.print(" ");
                    break;
                default:
                    random.nextInt(4);
                    break;

            }
        }

    }
}



